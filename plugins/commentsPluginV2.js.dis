const PluginInterface = require('../pluginInterface');

function sanitize(string) {
  const map = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      "/": '&#x2F;',
  };
  const reg = /[&<>"'/]/ig;
  return string.replace(reg, (match)=>(map[match]));
}

class commentsPluginV2 extends PluginInterface {
    constructor() {
        super('commentsPluginV2', '1.0.0')

        let newTemplate
        let config = this.getPluginConfig()
        var sampleComments = {
            ["index.md"]: [
                {
                    "author": "John Doe",
                    "comment": "This is a comment.",
                    "date": "2021-01-01"
                }
            ]
        }

        // this.registerHook('beforeTemplate', async (template, content, frontmatter, fileName) => {
        //     this.log(`adding comments to ${fileName}!`);
        //     let comments = sampleComments[fileName] || [];
        //     // this.log(JSON.stringify(c omments));
        //     Object.keys(comments).forEach((key) => {
        //         // this.log(template)
        //         newTemplate = template.replace("{COMMENTS}", `<div id="comment">${key.author}<br>${key.comment}</div>`);
        //     });
        //     // Object.keys(sampleComments).forEach((key) => {
        //     //     if (key === fileName) {
        //     //         template = template.replace("{COMMENTS}", `<p>${key}</p>`); // add comments to template
        //     //     }
        //     // })
        //     return newTemplate, content, frontmatter;
        // })

    }
}

module.exports = commentsPluginV2;